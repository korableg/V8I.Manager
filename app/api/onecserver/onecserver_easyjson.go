// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package onecserver

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver(in *jlexer.Lexer, out *UpdateServerRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "lst_path":
			out.LSTPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver(out *jwriter.Writer, in UpdateServerRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"lst_path\":"
		out.RawString(prefix)
		out.String(string(in.LSTPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateServerRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateServerRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateServerRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateServerRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver(l, v)
}
func easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver1(in *jlexer.Lexer, out *SwitchWatchingResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "watching":
			out.Watching = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver1(out *jwriter.Writer, in SwitchWatchingResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"watching\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Watching))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SwitchWatchingResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SwitchWatchingResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SwitchWatchingResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SwitchWatchingResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver1(l, v)
}
func easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver2(in *jlexer.Lexer, out *Server) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "lst_path":
			out.LSTPath = string(in.String())
		case "watch":
			out.Watch = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver2(out *jwriter.Writer, in Server) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"lst_path\":"
		out.RawString(prefix)
		out.String(string(in.LSTPath))
	}
	{
		const prefix string = ",\"watch\":"
		out.RawString(prefix)
		out.Bool(bool(in.Watch))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Server) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Server) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Server) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Server) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver2(l, v)
}
func easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver3(in *jlexer.Lexer, out *AddServerResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver3(out *jwriter.Writer, in AddServerResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddServerResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddServerResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddServerResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddServerResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver3(l, v)
}
func easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver4(in *jlexer.Lexer, out *AddServerRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "lst_path":
			out.LSTPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver4(out *jwriter.Writer, in AddServerRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"lst_path\":"
		out.RawString(prefix)
		out.String(string(in.LSTPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddServerRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddServerRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB45059feEncodeGithubComKorablegV8IManagerAppApiOnecserver4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddServerRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddServerRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB45059feDecodeGithubComKorablegV8IManagerAppApiOnecserver4(l, v)
}
