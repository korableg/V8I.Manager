// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package onecdb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCa160799DecodeGithubComKorablegV8IManagerAppApiOnecdb(in *jlexer.Lexer, out *UpdateDBRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.UUID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "connect":
			out.Connect = string(in.String())
		case "order_in_list":
			out.OrderInList = int64(in.Int64())
		case "order_in_tree":
			out.OrderInTree = int64(in.Int64())
		case "folder":
			out.Folder = string(in.String())
		case "client_connection_speed":
			out.ClientConnectionSpeed = string(in.String())
		case "app":
			out.App = string(in.String())
		case "wa":
			out.WA = int64(in.Int64())
		case "version":
			out.Version = string(in.String())
		case "additional_parameters":
			out.AdditionalParameters = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa160799EncodeGithubComKorablegV8IManagerAppApiOnecdb(out *jwriter.Writer, in UpdateDBRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"connect\":"
		out.RawString(prefix)
		out.String(string(in.Connect))
	}
	{
		const prefix string = ",\"order_in_list\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderInList))
	}
	{
		const prefix string = ",\"order_in_tree\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderInTree))
	}
	{
		const prefix string = ",\"folder\":"
		out.RawString(prefix)
		out.String(string(in.Folder))
	}
	{
		const prefix string = ",\"client_connection_speed\":"
		out.RawString(prefix)
		out.String(string(in.ClientConnectionSpeed))
	}
	{
		const prefix string = ",\"app\":"
		out.RawString(prefix)
		out.String(string(in.App))
	}
	{
		const prefix string = ",\"wa\":"
		out.RawString(prefix)
		out.Int64(int64(in.WA))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"additional_parameters\":"
		out.RawString(prefix)
		out.String(string(in.AdditionalParameters))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateDBRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCa160799EncodeGithubComKorablegV8IManagerAppApiOnecdb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateDBRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCa160799EncodeGithubComKorablegV8IManagerAppApiOnecdb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateDBRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCa160799DecodeGithubComKorablegV8IManagerAppApiOnecdb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateDBRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCa160799DecodeGithubComKorablegV8IManagerAppApiOnecdb(l, v)
}
func easyjsonCa160799DecodeGithubComKorablegV8IManagerAppApiOnecdb1(in *jlexer.Lexer, out *DB) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "uuid":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UUID).UnmarshalText(data))
			}
		case "name":
			out.Name = string(in.String())
		case "connect":
			out.Connect = string(in.String())
		case "order_in_list":
			out.OrderInList = int64(in.Int64())
		case "order_in_tree":
			out.OrderInTree = int64(in.Int64())
		case "folder":
			out.Folder = string(in.String())
		case "client_connection_speed":
			out.ClientConnectionSpeed = string(in.String())
		case "app":
			out.App = string(in.String())
		case "wa":
			out.WA = int64(in.Int64())
		case "version":
			out.Version = string(in.String())
		case "web_common_info_base_url":
			out.WebCommonInfoBaseURL = string(in.String())
		case "additional_parameters":
			out.AdditionalParameters = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa160799EncodeGithubComKorablegV8IManagerAppApiOnecdb1(out *jwriter.Writer, in DB) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix)
		out.RawText((in.UUID).MarshalText())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"connect\":"
		out.RawString(prefix)
		out.String(string(in.Connect))
	}
	{
		const prefix string = ",\"order_in_list\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderInList))
	}
	{
		const prefix string = ",\"order_in_tree\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderInTree))
	}
	{
		const prefix string = ",\"folder\":"
		out.RawString(prefix)
		out.String(string(in.Folder))
	}
	{
		const prefix string = ",\"client_connection_speed\":"
		out.RawString(prefix)
		out.String(string(in.ClientConnectionSpeed))
	}
	{
		const prefix string = ",\"app\":"
		out.RawString(prefix)
		out.String(string(in.App))
	}
	{
		const prefix string = ",\"wa\":"
		out.RawString(prefix)
		out.Int64(int64(in.WA))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"web_common_info_base_url\":"
		out.RawString(prefix)
		out.String(string(in.WebCommonInfoBaseURL))
	}
	{
		const prefix string = ",\"additional_parameters\":"
		out.RawString(prefix)
		out.String(string(in.AdditionalParameters))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DB) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCa160799EncodeGithubComKorablegV8IManagerAppApiOnecdb1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DB) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCa160799EncodeGithubComKorablegV8IManagerAppApiOnecdb1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DB) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCa160799DecodeGithubComKorablegV8IManagerAppApiOnecdb1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DB) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCa160799DecodeGithubComKorablegV8IManagerAppApiOnecdb1(l, v)
}
func easyjsonCa160799DecodeGithubComKorablegV8IManagerAppApiOnecdb2(in *jlexer.Lexer, out *AddDBResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa160799EncodeGithubComKorablegV8IManagerAppApiOnecdb2(out *jwriter.Writer, in AddDBResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddDBResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCa160799EncodeGithubComKorablegV8IManagerAppApiOnecdb2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddDBResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCa160799EncodeGithubComKorablegV8IManagerAppApiOnecdb2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddDBResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCa160799DecodeGithubComKorablegV8IManagerAppApiOnecdb2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddDBResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCa160799DecodeGithubComKorablegV8IManagerAppApiOnecdb2(l, v)
}
func easyjsonCa160799DecodeGithubComKorablegV8IManagerAppApiOnecdb3(in *jlexer.Lexer, out *AddDBRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.UUID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "connect":
			out.Connect = string(in.String())
		case "order_in_list":
			out.OrderInList = int64(in.Int64())
		case "order_in_tree":
			out.OrderInTree = int64(in.Int64())
		case "folder":
			out.Folder = string(in.String())
		case "client_connection_speed":
			out.ClientConnectionSpeed = string(in.String())
		case "app":
			out.App = string(in.String())
		case "wa":
			out.WA = int64(in.Int64())
		case "version":
			out.Version = string(in.String())
		case "additional_parameters":
			out.AdditionalParameters = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa160799EncodeGithubComKorablegV8IManagerAppApiOnecdb3(out *jwriter.Writer, in AddDBRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"connect\":"
		out.RawString(prefix)
		out.String(string(in.Connect))
	}
	{
		const prefix string = ",\"order_in_list\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderInList))
	}
	{
		const prefix string = ",\"order_in_tree\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderInTree))
	}
	{
		const prefix string = ",\"folder\":"
		out.RawString(prefix)
		out.String(string(in.Folder))
	}
	{
		const prefix string = ",\"client_connection_speed\":"
		out.RawString(prefix)
		out.String(string(in.ClientConnectionSpeed))
	}
	{
		const prefix string = ",\"app\":"
		out.RawString(prefix)
		out.String(string(in.App))
	}
	{
		const prefix string = ",\"wa\":"
		out.RawString(prefix)
		out.Int64(int64(in.WA))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"additional_parameters\":"
		out.RawString(prefix)
		out.String(string(in.AdditionalParameters))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddDBRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCa160799EncodeGithubComKorablegV8IManagerAppApiOnecdb3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddDBRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCa160799EncodeGithubComKorablegV8IManagerAppApiOnecdb3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddDBRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCa160799DecodeGithubComKorablegV8IManagerAppApiOnecdb3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddDBRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCa160799DecodeGithubComKorablegV8IManagerAppApiOnecdb3(l, v)
}
